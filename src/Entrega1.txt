Primera entrega del proyecto final.
Se desarrollara un servidor que contenga los endpoints y servicios necesarios para gestionar los productos y carritos de compra en el
E-commerce.
Recordemos: Ya creamos la estructura base de lo que será nuestro servidor a lo largo del proyecto. Agregamos nuestros primeros endpoints
para trabajar con productos. Conectamos la persistencia de archivos a nuestros endpoints.
Primera entrega. Se debe entregar:
Desarrollar el servidor basado en node.js y express que escuche el puerto 8080 y disponga de dos grupos de ruta: /products y /carts.
Dichos endpoints estarán imprementados con el router de express con las siguientes especificaciones:
Para el manejo de productos, el cual tendra su router en /api/products , configurar las siguientes rutas:
La ruta raíz GET / deberá listar todos los productos de la base. (Incluyendo la limitación ?limit del desafío anterior).
La ruta GET /:pid deberá traer sólo el producto con el id proporcionado.
La ruta raíz POST / deberá agregar un nuevo producto con los campos: 
    - id: Number/String (a tu elección, el id no se manda desde body, se autogenera como hemos visto desde los primeros entregables, 
      asegurando que NUNCA se repetiran los ids en el archivo).
    - tittle: String
    - description: String
    - code: String 
    - price: Number
    - status: Bolean
    - stock: Number
    - category: String
    - thumbnails: Array de strings que contenga las rutas donde están almacenadas las imágenes referetes a dicho producto.
Status es true por defecto.
Todos los campos son obligatorios, a excepción de thumbnails.
La ruta PUT /:pid deberá tomar un producto y actualizarlo por los campos enviados desde body. NUNCA se debe actualizar o eliminar el id
al momento de hacer dicha actualización.
La ruta DELETE /:pid debera eliminar el producto con el pid indicado.

Para el carrito el cual tendra su router en /api/carts, configurar dos rutas:
La ruta Raiz POST / deberá crear un nuevo carrito con la siguiente estructura :
      - id: Number/String (A tu elección, de igual manera como los productos, debes asegurar que nunca se dupliquen los ids y que éste
        se autogenere).
      - products: array que contendra objetos que representen cada producto.
La ruta GET /:cid deberá listar los productos que pertenezcan al carrito con el parametro cid proporcionados.
La ruta POST /:cid/product/:pid deberá agregar el producto al arreglo "products" del carrito seleccionado, agregándose como un objeto
bajo el siguiente formato:
      - product: SOLO DEBE CONTENER EL ID DEL PRODUCTO (es crucial que no agregues el producto completo).
      - quantity: Debe contener el número de ejemplares de dicho producto. El producto, de momento, se agregará de uno en uno.
Además, si un producto ya existente intenta agregarse al producto, incrementar el campo quantity de dicho producto.
La persistencia de la información se implementará utilizando el file system, donde los archivos "products.json" y "cart.json", respaldan
la información.
No es necesario realizar ninguna implementación visual , todo el flujo se puede realizar por Postman o por el cliente de tu preferencia.
SUGERENCIAS:
No olvides app.use(express.json())
No es necesario implementar multer.
